#!/usr/bin/env python3
"""Interactive setup script for LLM4ArxivPaper environment variables."""

import os
import sys
from pathlib import Path


def print_header(text: str) -> None:
	"""Print a formatted header."""
	print("\n" + "=" * 70)
	print(f"  {text}")
	print("=" * 70 + "\n")


def get_input(prompt: str, default: str = "", required: bool = True) -> str:
	"""Get user input with optional default value."""
	if default:
		prompt_text = f"{prompt} [{default}]: "
	else:
		prompt_text = f"{prompt}: "
	
	while True:
		value = input(prompt_text).strip()
		
		if not value and default:
			return default
		
		if not value and required:
			print("‚ùå This field is required. Please enter a value.")
			continue
		
		return value


def get_yes_no(prompt: str, default: bool = False) -> bool:
	"""Get yes/no input from user."""
	default_str = "Y/n" if default else "y/N"
	while True:
		response = input(f"{prompt} [{default_str}]: ").strip().lower()
		
		if not response:
			return default
		
		if response in ('y', 'yes'):
			return True
		elif response in ('n', 'no'):
			return False
		else:
			print("‚ùå Please enter 'y' or 'n'")


def main():
	"""Main setup workflow."""
	print_header("üöÄ LLM4ArxivPaper Environment Setup")
	
	print("This script will help you configure environment variables for LLM4ArxivPaper.")
	print("You can press Ctrl+C at any time to exit.\n")
	
	# Collect configuration
	config = {}
	
	# OpenAI configuration
	print_header("1Ô∏è‚É£  OpenAI Configuration")
	
	online_mode = get_yes_no("Do you want to use online mode (requires OpenAI API)?", default=True)
	
	if online_mode:
		print("\nüìù You'll need an OpenAI API key.")
		print("   Get one from: https://platform.openai.com/api-keys\n")
		
		api_key = get_input("Enter your OpenAI API Key", required=True)
		config['API_KEY'] = api_key
		
		custom_url = get_yes_no("Are you using Azure or a custom OpenAI endpoint?", default=False)
		if custom_url:
			base_url = get_input("Enter base URL", default="https://api.openai.com/v1", required=False)
			if base_url:
				config['BASE_URL'] = base_url
	else:
		print("‚ÑπÔ∏è  Running in offline mode - no API key needed.")
		print("   (You can enable online mode later by setting runtime.mode in config)\n")
	
	# Email configuration
	print_header("2Ô∏è‚É£  Email Notification Configuration")
	
	enable_email = get_yes_no("Do you want to enable email notifications?", default=False)
	
	if enable_email:
		print("\nüìß Email configuration:")
		print("   For Gmail, use an app-specific password:")
		print("   https://myaccount.google.com/apppasswords\n")
		
		mail_username = get_input("Enter your email address", required=True)
		config['MAIL_USERNAME'] = mail_username
		
		mail_password = get_input("Enter your email password (or app password)", required=True)
		config['MAIL_PASSWORD'] = mail_password
	else:
		print("‚ÑπÔ∏è  Email notifications disabled.")
		print("   (You can enable it later by setting email.enabled in config)\n")
	
	# Summary
	print_header("üìã Configuration Summary")
	
	if config:
		print("The following environment variables will be set:\n")
		for key, value in config.items():
			if 'PASSWORD' in key or 'KEY' in key:
				# Mask sensitive values
				masked = value[:8] + '*' * (len(value) - 8) if len(value) > 8 else '***'
				print(f"   {key}={masked}")
			else:
				print(f"   {key}={value}")
	else:
		print("‚ÑπÔ∏è  No environment variables to set.")
	
	print()
	
	# Generate export commands
	print_header("3Ô∏è‚É£  Next Steps")
	
	if config:
		print("Copy and run these commands in your terminal:\n")
		print("# Temporary (current session only)")
		for key, value in config.items():
			# Escape single quotes in value
			escaped_value = value.replace("'", "'\\''")
			print(f"export {key}='{escaped_value}'")
		
		print("\n# OR add to your shell profile for permanent use")
		shell = os.environ.get('SHELL', '/bin/zsh')
		if 'zsh' in shell:
			profile_file = "~/.zshrc"
		elif 'bash' in shell:
			profile_file = "~/.bashrc"
		else:
			profile_file = "~/.profile"
		
		print(f"# Add these lines to {profile_file}:")
		for key, value in config.items():
			escaped_value = value.replace("'", "'\\''")
			print(f"export {key}='{escaped_value}'")
		
		print(f"\n# Then reload the profile:")
		print(f"source {profile_file}")
		
		# Save to .env file option
		save_env = get_yes_no("\nDo you want to save these to a .env file?", default=True)
		if save_env:
			env_file = Path.cwd() / ".env"
			
			# Check if file exists
			if env_file.exists():
				overwrite = get_yes_no(f".env file already exists. Overwrite?", default=False)
				if not overwrite:
					print("‚ùå Skipped saving .env file.")
					return
			
			# Write .env file
			with open(env_file, 'w') as f:
				f.write("# LLM4ArxivPaper Environment Variables\n")
				f.write("# Generated by setup script\n")
				f.write(f"# Date: {__import__('datetime').datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
				
				for key, value in config.items():
					f.write(f"{key}={value}\n")
			
			print(f"\n‚úÖ Saved to {env_file}")
			print("\n‚ö†Ô∏è  IMPORTANT: Add .env to .gitignore to avoid committing secrets!")
			print("   Run: echo '.env' >> .gitignore")
			
			print("\nüìñ To use the .env file, run before executing the pipeline:")
			print("   set -a && source .env && set +a")
	else:
		print("‚ÑπÔ∏è  No configuration needed for offline mode without email.")
	
	print("\n" + "=" * 70)
	print("‚úÖ Setup complete! You can now run:")
	print("   python src/main.py")
	print("=" * 70 + "\n")


if __name__ == "__main__":
	try:
		main()
	except KeyboardInterrupt:
		print("\n\n‚ùå Setup cancelled by user.")
		sys.exit(1)
	except Exception as e:
		print(f"\n\n‚ùå Error during setup: {e}")
		sys.exit(1)
